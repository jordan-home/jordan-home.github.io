(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{524:function(t,s,a){"use strict";a.r(s);var n=a(7),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"},[t._v("书籍简介")]),a("p",[t._v("书名：《你不知掉的JavaScript（上卷）》～"),a("code",[t._v("混合对象类")]),t._v("，"),a("code",[t._v("原型")]),t._v("和"),a("code",[t._v("行为委托")])]),t._v(" "),a("p",[t._v("作者：[美] Kyle Simpson")]),t._v(" "),a("p",[t._v("分类：IT")])]),t._v(" "),a("h2",{attrs:{id:"混合对象-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#混合对象-类"}},[t._v("#")]),t._v(" 混合对象-类")]),t._v(" "),a("p",[t._v("类是一种设计模式，JS中也有类似的语法，但是JS中的类和其他语言中的类完全不同。")]),t._v(" "),a("p",[t._v("类意味着复制。")]),t._v(" "),a("p",[t._v("传统类的实例化意味着类的行为会复制到实例中，子类会复制父类的行为。多态也只是引用父类的方法，加以复写。")]),t._v(" "),a("p",[t._v("JS中不会像类那样自动创建对象的副本。")]),t._v(" "),a("h2",{attrs:{id:"原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[t._v("#")]),t._v(" 原型")]),t._v(" "),a("h3",{attrs:{id:"prototype-内置属性-原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#prototype-内置属性-原型"}},[t._v("#")]),t._v(" "),a("code",[t._v("Prototype")]),t._v(" ：内置属性：原型")]),t._v(" "),a("h4",{attrs:{id:"object-prototype"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-prototype"}},[t._v("#")]),t._v(" Object.prototype")]),t._v(" "),a("p",[t._v("原型机制就是指对象中的一个内部链接引用另一个对象。")]),t._v(" "),a("p",[t._v("所有普通的原型链最终会指向内置的Object.prototype。这个Object.prototype对象拥有许多JS中通用的功能，包括 "),a("code",[t._v(".toString()")]),t._v(","),a("code",[t._v(".valueOf()")]),t._v(","),a("code",[t._v(".hasOwnProperty(..)")]),t._v(","),a("code",[t._v(".isPrototypeOf(..)")]),t._v("等。")]),t._v(" "),a("h4",{attrs:{id:"属性设置和屏蔽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性设置和屏蔽"}},[t._v("#")]),t._v(" 属性设置和屏蔽")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'mm'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("首先，会检查obj是否包含a属性，有的话赋值；没有的话，则向上查找原型链。如果在原型链找到了，且是只读的，则赋值失败；若可写的，则直接在obj上添加属性a并赋值，成为屏蔽属性；若找到的是一个S etter,则直接调用这个setter。")]),t._v(" "),a("p",[t._v("当然，如果你只想设置屏蔽属性，也就是直接在对象上定义一个属性，则")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[t._v("#")]),t._v(" 类")]),t._v(" "),a("p",[t._v("JS中只有对象，少有的不通过类创建对象的语言。")]),t._v(" "),a("h4",{attrs:{id:"类-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类-函数"}},[t._v("#")]),t._v(" ‘类’函数")]),t._v(" "),a("p",[t._v("JS中存在一个行为：模仿类。模仿类的原理是基于原型的存在。")]),t._v(" "),a("p",[t._v("在JS中没有复制（或者说实例化）的机制，而是创建多个对象，它们的prototype关联的是同一个对象。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("需要注意是，"),a("code",[t._v("new Foo()")]),t._v(" 这个函数调用实际上并没有"),a("strong",[t._v("直接")]),t._v(" 创建关联，这个关联只是一个意外的副作用。"),a("strong",[t._v("更直接")]),t._v(" 的方法是"),a("code",[t._v("Object.create(..)")])]),t._v(" "),a("h4",{attrs:{id:"构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[t._v("#")]),t._v(" 构造函数")]),t._v(" "),a("p",[a("code",[t._v("Foo")]),t._v("并不是一个构造函数，和其他的函数没啥区别，只是看起来是new 调用它构造了一个对象。在JavaScript中对于“构造函数”最准确的解释是，所有带"),a("code",[t._v("new")]),t._v(" 的函数调用。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* .. */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* .. */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个新原型对象")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false!")]),t._v("\na1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true!")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[t._v("解释：")]),t._v(" "),a("p",[a("code",[t._v("a1")]),t._v(" 并没有"),a("code",[t._v(".constructor")]),t._v(" 属性，所以它会委托"),a("code",[t._v("[[Prototype]]")]),t._v(" 链上的"),a("code",[t._v("Foo.prototype")]),t._v(" 。但是这个对象也没有"),a("code",[t._v(".constructor")]),t._v(" 属性（不过默认的"),a("code",[t._v("Foo.prototype")]),t._v(" 对象有这个属性！），所以它会继续委托，这次会委托给委托链顶端的"),a("code",[t._v("Object.prototype")]),t._v(" 。"),a("strong",[t._v("这个")]),t._v(" 对象有"),a("code",[t._v(".constructor")]),t._v(" 属性，指向内置的"),a("code",[t._v("Object(..)")]),t._v(" 函数。")]),t._v(" "),a("h3",{attrs:{id:"原型-继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型-继承"}},[t._v("#")]),t._v(" (原型)继承")]),t._v(" "),a("p",[t._v("检查一个实例（JavaScript中的对象）的继承祖先（JavaScript中的委托关联）通常被称为"),a("strong",[t._v("内省")]),t._v(" （或者"),a("strong",[t._v("反射")]),t._v(" ）。")]),t._v(" "),a("p",[t._v("instanceof: a 的原型链上可否找到指向 A.prototype的对象")]),t._v(" "),a("p",[t._v("X.isPrototypeOf(Y) : X是否出现在Y的原型链中")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("a "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isPrototypeOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h3",{attrs:{id:"对象关联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象关联"}},[t._v("#")]),t._v(" 对象关联")]),t._v(" "),a("p",[t._v("如果在第一个对象上没有找到需要的属性或者方法引用，引擎就会继续在"),a("code",[t._v("[[Prototype]]")]),t._v(" 关联的对象上进行查找。同理，如果在后者中也没有找到需要的引用就会继续查找它的"),a("code",[t._v("[[Prototype]]")]),t._v(" ，以此类推。这一系列对象的链接被称为“原型链”。简单的说，原型的机制本质上是对象之间的关联关系")]),t._v(" "),a("h4",{attrs:{id:"创建关联"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建关联"}},[t._v("#")]),t._v(" 创建关联")]),t._v(" "),a("p",[a("code",[t._v("Object.create(..)")]),t._v(" 会创建一个新对象（"),a("code",[t._v("bar")]),t._v(" ）并把它关联到我们指定的对象（"),a("code",[t._v("foo")]),t._v(" ），这样我们就可以充分发挥"),a("code",[t._v("[[Prototype]]")]),t._v(" 机制的威力（委托）并且避免不必要的麻烦（比如使用"),a("code",[t._v("new")]),t._v(" 的构造函数调用会生成"),a("code",[t._v(".prototype")]),t._v(" 和"),a("code",[t._v(".constructor")]),t._v(" 引用）。")]),t._v(" "),a("p",[t._v("不"),a("strong",[t._v("需要")]),t._v(" 类来创建两个对象之间的关系，只需要通过委托来关联对象就足够了。而"),a("code",[t._v("Object.create(..)")]),t._v(" 不包含任何“类的诡计”，所以它可以完美地创建我们想要的关联关系。")]),t._v(" "),a("h4",{attrs:{id:"关联关系是否备用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关联关系是否备用"}},[t._v("#")]),t._v(" 关联关系是否备用")]),t._v(" "),a("p",[t._v("当对象A上找不到属性b,就会在A的原型链上找到来代替，这里体现了关联关系的备用；但是，这并不应该成为使用关联关系的目的。")]),t._v(" "),a("p",[t._v("上面这种看作直接委托的模式，会导致api不够清晰，更推荐使用内部委托的模式。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" preObj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("cool")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("preObj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("doCool")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doCool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("h2",{attrs:{id:"行为委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行为委托"}},[t._v("#")]),t._v(" 行为委托")]),t._v(" "),a("h3",{attrs:{id:"委托"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#委托"}},[t._v("#")]),t._v(" 委托")]),t._v(" "),a("p",[a("strong",[t._v("委托行为")]),t._v(" 意味着某些对象在找不到属性或者方法引用时会把这个请求委托给另一个对象。API接口的设计中，委托最好在内部实现，不要直接暴露出去。")]),t._v(" "),a("p",[t._v("🈲️：互相委托")]),t._v(" "),a("h3",{attrs:{id:"类和对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类和对象"}},[t._v("#")]),t._v(" 类和对象")]),t._v(" "),a("p",[t._v("ES6中 的class是一种语法糖，本质上依然是函数。JS中仍然不存在真正的类。")]),t._v(" "),a("p",[t._v("对象关联可以"),a("strong",[t._v("更好地支持关注分离（separation of concerns）原则")]),t._v(" ，创建和初始化并不需要合并为一个步骤。")]),t._v(" "),a("h3",{attrs:{id:"更简洁的设计"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更简洁的设计"}},[t._v("#")]),t._v(" 更简洁的设计")]),t._v(" "),a("h3",{attrs:{id:"更好的语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更好的语法"}},[t._v("#")]),t._v(" 更好的语法")]),t._v(" "),a("h3",{attrs:{id:"内省"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内省"}},[t._v("#")]),t._v(" 内省")]),t._v(" "),a("p",[t._v("检查实例的类型叫做内省。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("instanceof")])]),t._v(" "),a("li",[a("p",[t._v("鸭子模式：如果看起来像鸭子，叫起来像鸭子，那就一定是鸭子")]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("p",[t._v("出于各种各样的原因，我们需要判断一个对象引用是否是 Promise，但是判断的方法是检查对象是否有 then() 方法。换句话说，如果对象有 then() 方法，ES6的 Promise 就会认为这个对象是“可持续”（ thenable）的，因此会期望它具有 Promise 的所有标准行为。")])]),t._v(" "),a("li",[a("p",[t._v("Foo.isPrototypeOf( Bar )")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);